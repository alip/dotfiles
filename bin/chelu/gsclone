#!/usr/bin/env ruby
# Usage: gsclone https://blah/bluh/trunk
# Creates bluh.svn to be used for working with externals and deleting directories
# Creates bluh and symlinks the externals from bluh.svn (only from vendor and vendor/plugins)
#
# Subsequent runs updates the clone
#   svn up
#   git svn rebase
#   resymlink (particularly handy when you're moving directories around)
#
# ISSUES
#   * doesn't remove deleted externals, probably never will
#
# TODO
#   * don't add duplicates to .gitignore

require 'fileutils'

class Externals
  def initialize(repo=ARGV[0], svndir=ARGV[1])
    if repo =~ /^\w+$/
      @dir = repo
      @svndir = "#{@dir}.svn"
      @repo = `svn info #{@svndir}`.split("\n").grep(/URL: /)[0].split('URL: ')[1]
    else
      @repo = repo
      @dir = svndir || File.basename(@repo.gsub(/\/$/, "").gsub(/\/trunk$/, ""))
      @svndir = "#{@dir}.svn"
    end

    echo "checking out with svn"
    if File.exists?(@svndir)
      exec "svn up #{@svndir}"
    else
      exec "svn co #{@repo} #{@svndir}"
    end

    echo "checking out with git svn"
    if File.exists?(@dir)
      FileUtils.cd(@dir) do
        exec "git svn rebase"
      end
    else
      FileUtils.mkdir @dir
      FileUtils.cd(@dir) do
        rev = exec("svn log -q --limit 1 #{@repo}")
        rev = rev.split("\n")[1][/^r\d+\s/].gsub(/\s/, "")[1..-1]

        exec "git svn init #{@repo}"
        exec "git svn fetch -r#{rev}"
        exec "git config gc.auto 0"
        exec "git reset --hard"
      end
    end

    echo "externals"
    exts = {}
    FileUtils.cd(@svndir) do
      exts.merge!(externals)
      exts.merge!(externals("vendor"))
      exts.merge!(externals("vendor/plugins"))
    end
    p externals.inspect
    make_links(exts)

    # FileUtils.cd(@dir) do
      # exec "git add .gitignore"
      # exec "git commit -m '.gitignore externals for git-svn'"
    # end
  end

  def die(msg="", code=1)
    puts "FAEL! #{msg}"
    exit code
  end

  def echo(msg)
    puts msg
  end

  def exec(cmd)
    puts "exec: #{cmd}"
    return `#{cmd}`
  end

  def externals(svndir = "")
    result = {}
    exts = exec "svn propget svn:externals #{svndir}"
    exts.split("\n").each do |external|
      data = external.match(/^([^\s]+)\s+(?:(?:-r|--revision)\s*(\d+)\s+)?(.+)$/)
      case data.length
      when 4
        subdir, rev, url = data[1], data[2].nil? ? :head : data[2].to_i, data[3]
      else
        raise SyntaxError, "Could not parse svn:externals on #{svndir}: #{external}"
      end

      result[File.join(svndir, subdir)] = {:revision => rev, :url => url}
    end
    result
  end

  def make_links(externals)
    exec "echo >> #{File.join(@dir, ".gitignore")}"
    externals.each do |dir, exts|
      exec "ln -sf #{File.expand_path(File.join(@dir + ".svn", dir))} #{File.expand_path(File.join(@dir, dir))}"
      exec "echo #{dir} >> #{File.join(@dir, ".gitignore")}"
    end
  end
end

Externals.new
